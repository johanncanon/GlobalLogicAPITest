sequenceDiagram
    participant Client
    participant Controller as UserController
    participant Service as UserService
    participant Repository as UserRepository
    participant Database as H2 Database
    participant Security as SecurityConfig
    participant JWT as JwtUtil
    participant UserEntity as UserEntity
    participant Filter as JwtAuthFilter

    Note over Client, Filter: User Registration Flow
    Client->>Controller: POST /api/auth/register
    Controller->>Service: createUser(CreateUserRequest)
    Service->>Repository: existsByUsername()
    Repository->>Database: SELECT * FROM users WHERE username=?
    Database-->>Repository: false
    Repository-->>Service: false
    Service->>Repository: existsByEmail()
    Repository->>Database: SELECT * FROM users WHERE email=?
    Database-->>Repository: false
    Repository-->>Service: false
    Service->>Service: passwordEncoder.encode(password)
    Service->>UserEntity: Utils.generateRandomUUID()
    UserEntity->>UserEntity: Utils.formatDateTime(LocalDateTime.now())
    UserEntity-->>Service: New UserEntity
    Service->>JWT: generateToken(username)
    JWT->>JWT: Create JWT with secret + expiration
    JWT-->>Service: JWT token
    Service->>Repository: save(user)
    Repository->>Database: INSERT INTO users...
    Database-->>Repository: User entity
    Repository-->>Service: User entity
    Service-->>Controller: UserResponse
    Controller-->>Client: 200 OK + UserResponse

    Note over Client, Filter: User Login Flow
    Client->>Controller: POST /api/auth/login
    Controller->>Service: authenticate(LoginRequest)
    Service->>Repository: findByUsername()
    Repository->>Database: SELECT * FROM users WHERE username=?
    Database-->>Repository: User entity
    Repository-->>Service: User entity
    Service->>Service: passwordEncoder.matches()
    Service->>JWT: generateToken(username)
    JWT->>JWT: Create JWT with secret + expiration
    JWT-->>Service: JWT token
    Service-->>Controller: JwtResponse(token, user)
    Controller-->>Client: 200 OK + JWT token

    Note over Client, Filter: Protected Endpoint Access
    Client->>Filter: GET /api/users (with Bearer token)
    Filter->>JWT: validateToken(token)
    JWT-->>Filter: true
    Filter->>JWT: getUsernameFromToken()
    JWT-->>Filter: username
    Filter->>Security: Set authentication context
    Filter->>Controller: Forward request
    Controller->>Service: getAllUsers()
    Service->>Repository: findAll()
    Repository->>Database: SELECT * FROM users
    Database-->>Repository: List<User>
    Repository-->>Service: List<User>
    Service->>Service: mapToUserResponse()
    Service-->>Controller: List<UserResponse>
    Controller-->>Client: 200 OK + List<UserResponse>

----------------------------------------------------------------------------------------------------------------------

@startuml
!define RECTANGLE class

package "Spring Boot Microservice" {
    
    package "Presentation Layer" {
        [UserController] as Controller
        note right of Controller : @RestController\n- createUser()\n- loginUser()\n- getAllUsers()\n- getUserById()\n- getUserByName()
    }
    
    package "Security Layer" {
        [SecurityConfig] as Security
        [JwtAuthenticationFilter] as Filter
        [JwtUtil] as JWT
        
        note right of Security : @Configuration\n- JWT Filter Chain\n- Password Encoder
        note right of Filter : @Component\n- Token Validation
        note right of JWT : @Component\n- Token Generation
    }
    
    package "Business Layer" {
        [UserService] as Service
        note right of Service : @Service\n- Business Logic\n- User Operations
    }
    
    package "Data Access Layer" {
        [UserRepository] as Repository
        note right of Repository : @Repository\nextends JpaRepository
    }
    
    package "Domain Layer" {
        [User Entity] as Entity
        [DTOs] as DTOs
    }
    
    package "Configuration" {
        [application.yml] as Config
    }
  
    package "Exceptions" {
        
      
        package "Custom" {
            [BadRequestException] as BadRequest
            [InvalidCredentialsException] as InvalidCredentials
            [ResourceNotFoundException] as NotFound
            [UserAlreadyExistsException] as AlreadyExist
          
        }
        package "Handler" {
            [GlobalExceptionHandler] as GlobalHandler
            note right of GlobalHandler : @RestControllerAdvice
        }
        package "Model" {
            [ErrorDetail] as ErrorDetail
            [ErrorResponse] as ErrorResponse
        }
      
    }
}

package "External" {
    [Client Applications] as Client
    database "H2 Database" as H2
    [Spring Boot Framework] as SpringBoot
    [JWT Library] as JWTLib
}

' Relationships
Client --> Controller : HTTP Requests
Controller --> Service : Delegates
Service --> Repository : Data Access
Repository --> H2 : JPA/Hibernate
Repository --> Entity : Maps to
Service --> DTOs : Uses

Service --> AlreadyExist : Throws
Service --> NotFound : Throws
Service --> InvalidCredentials : Throws

ErrorDetail --> ErrorResponse : uses

GlobalHandler --> ErrorDetail : Maps To
Controller --> GlobalHandler : Delegates
DTOs --> BadRequest : Throws

Controller --> DTOs : Uses

' Security Flow
Client --> Filter : All Requests
Filter --> JWT : Validates
Filter --> Security : Protected Routes
JWT --> Config : Uses

' Dependencies
Service --> SpringBoot : Uses
JWT --> JWTLib : Uses
Repository --> SpringBoot : Uses

@enduml